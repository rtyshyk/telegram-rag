name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - run: pip install pre-commit
      - run: pre-commit run --all-files
      - run: cp .env.example .env
      - run: docker compose up -d --build
      - run: ./scripts/wait_for_health.sh
      - run: ./scripts/smoke_tests.sh

  api-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: pip install -r api/requirements.txt
      - run: pytest api/tests

  indexer-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Set up Python dependencies
        run: |
          pip install -r indexer/requirements.txt || true
          pip install pytest pytest-asyncio pydantic-settings
      - name: Run indexer tests
        env:
          OPENAI_API_KEY: test
          TG_API_ID: "12345"
          TG_API_HASH: testhash
          TG_PHONE: "+10000000000"
          DATABASE_URL: sqlite:///test.db
          VESPA_ENDPOINT: http://localhost:8080
          OPENAI_STUB: "true"
          TELETHON_STUB: "true"
        run: pytest indexer/tests -q

  ui-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install UI dependencies
        working-directory: ./ui
        run: npm ci
      - name: Run unit tests
        working-directory: ./ui
        run: npm run test:unit

  e2e-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Setup environment
        run: cp .env.example .env
      - name: Start backend services
        run: docker compose up -d --build
      - name: Wait for services to be healthy
        run: ./scripts/wait_for_health.sh
      - name: Cache UI node_modules
        id: ui-mod-cache
        uses: actions/cache@v4
        with:
          path: ui/node_modules
          key: ${{ runner.os }}-ui-node-${{ hashFiles('ui/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-ui-node-
      - name: Install UI dependencies
        if: steps.ui-mod-cache.outputs.cache-hit != 'true'
        working-directory: ./ui
        run: npm ci
      - name: Determine Playwright version
        id: pw-version
        working-directory: ./ui
        run: echo "version=$(node -p \"require('./package.json').devDependencies['@playwright/test']\")" >> $GITHUB_OUTPUT
      - name: Cache Playwright browsers
        id: pw-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.pw-version.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-playwright-
      - name: Install Playwright Browsers (first run only)
        if: steps.pw-cache.outputs.cache-hit != 'true'
        working-directory: ./ui
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        working-directory: ./ui
        run: npm run test:e2e
      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: ui/playwright-report/
          retention-days: 30
