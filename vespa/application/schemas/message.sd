schema message {
  document message {
    field id type string {
      indexing: attribute | summary
    }
    field text type string {
      indexing: index | summary
      index: enable-bm25
    }
    field bm25_text type string {
      indexing: index | summary
      index: enable-bm25
    }
    field vector_small type tensor<float>(x[1536]) {
      indexing: attribute | index | summary
      attribute {
        distance-metric: euclidean
      }
      index {
        hnsw {
          max-links-per-node: 16
          neighbors-to-explore-at-insert: 200
        }
      }
    }
    field vector_large type tensor<float>(x[3072]) {
      indexing: attribute | index | summary
      attribute {
        distance-metric: euclidean
      }
      index {
        hnsw {
          max-links-per-node: 16
          neighbors-to-explore-at-insert: 200
        }
      }
    }
    field chat_id type string {
      indexing: attribute | summary
    }
    field message_id type long {
      indexing: attribute | summary
    }
    field chunk_idx type int {
      indexing: attribute | summary
    }
    field source_title type string {
      indexing: attribute | summary
    }
    field sender type string {
      indexing: attribute | summary
    }
    field sender_username type string {
      indexing: attribute | summary
    }
    field chat_username type string {
      indexing: attribute | summary
    }
    field chat_type type string {
      indexing: attribute | summary
    }
    field message_date type long {
      indexing: attribute | summary
    }
    field edit_date type long {
      indexing: attribute | summary
    }
    field thread_id type long {
      indexing: attribute | summary
    }
    field has_link type bool {
      indexing: attribute | summary
    }
    field date type int {
      indexing: attribute | summary
    }
  }
  
  fieldset default {
    fields: text, bm25_text
  }
  
  rank-profile default {
    first-phase {
      expression: bm25(text) + bm25(bm25_text)
    }
  }
  
  rank-profile hybrid-small {
    inputs {
      query(qv_small) tensor<float>(x[1536])
    }
    first-phase {
      # nearestNeighbor(vector_small,qv_small) adds closeness(vector_small)
      expression: 1.6 * closeness(vector_small) + 0.9 * bm25(text) + 0.3 * bm25(bm25_text) + freshness(message_date)
    }
  }
  
  rank-profile hybrid-large {
    inputs {
      query(qv_large) tensor<float>(x[3072])
    }
    first-phase {
      # nearestNeighbor(vector_large,qv_large) adds closeness(vector_large)
      expression: 1.6 * closeness(vector_large) + 0.9 * bm25(text) + 0.3 * bm25(bm25_text) + freshness(message_date)
    }
  }
  
  # Legacy hybrid profile for backward compatibility (uses small by default)
  rank-profile hybrid {
    inputs {
      query(qv) tensor<float>(x[1536])
    }
    first-phase {
      # nearestNeighbor(vector_small,qv) adds closeness(vector_small)
      expression: 1.6 * closeness(vector_small) + 0.9 * bm25(text) + 0.3 * bm25(bm25_text) + freshness(message_date)
    }
  }
}
